***************************************
*** 01-02 Installing Docker Desktop ***
***************************************

https://www.docker.com/products/docker-desktop/

******************************************
*** 01-05 Running Your First Container ***
******************************************

docker pull hello-world

docker run hello-world

***************************************
*** 02-01 Using Docker CLI Commands ***
***************************************

docker run -d -p 8080:80 nginx

docker ps

docker ps -a

docker stop <container id>

docker stop <container name>

docker start <container id or name>

docker exec -it <container id or name> sh

***********************************
*** 02-02 Inspecting Containers ***
***********************************

docker run -d -p 8080:80 nginx

docker ps

docker inspect <container id or name>

docker inspect --format='{{.Config.Env}}' <container id or name>

************************************
*** 02-03 Viewing Container Logs ***
************************************

docker ps

docker logs <container id or name>

docker logs -f <container id or name>

*********************************
*** 02-04 Removing Containers ***
*********************************

docker ps -a

docker stop <container name or id>

docker rm <container name or id>

docker container prune

docker run -d -p 8080:80 nginx

***************************************************
*** 02-05 Challenge: Managing Docker Containers ***
***************************************************

- Run the nginx Docker container
- Get the ID of the nginx container
- Stop the running nginx container
- Remove the stopped nginx container

**************************************************
*** 02-06 Solution: Managing Docker Containers ***
**************************************************

docker run -d -p 8080:80 nginx

docker ps

docker stop <container id>

docker rm <container id>

***********************************************
*** 03-01 Finding and Pulling Docker Images ***
***********************************************

https://hub.docker.com

https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html

https://learn.microsoft.com/en-us/azure/container-registry/container-registry-get-started-docker-cli?tabs=azure-cli

https://cloud.google.com/artifact-registry/docs/docker/pushing-and-pulling

********************************************
*** 03-03 Using the Docker Build Command ***
********************************************

docker build -t docker-demo .

docker build --no-cache -t docker-demo .

docker run -p 3000:3000 docker-demo

http://localhost:3000

******************************************************
*** 03-04 Listing, Inspecting, and Removing Images ***
******************************************************

docker images

docker inspect docker-demo:latest

docker image rm docker-demo

********************************************
*** 03-05 Working With an Image Registry ***
********************************************

https://hub.docker.com

docker tag docker-demo:latest [username]/docker-demo:v1

docker build -t [username]/docker-demo:v1 .

docker login

docker push [username]/docker-demo:v1

docker pull [username]/docker-demo:v1

************************************************
*** 03-06 Challenge: Building a Custom Image ***
************************************************

- Build the docker-demo image and tag it as:
  [username]/docker-demo:v2
- Push the image you just built to Docker Hub
- Remove v1 of the [username]/docker-demo image
- Pull v1 of the image from Docker Hub

***********************************************
*** 03-06 Solution: Building a Custom Image ***
***********************************************

docker build -t [username]/docker-demo:v2 .

docker push [username]/docker-demo:v2

docker image rm [username]/docker-demo:v1

docker pull [username]/docker-demo:v1

***************************************************
*** 04-03 Running a Multi-Container Application ***
***************************************************

docker compose up

http://localhost:3000

docker compose up --build

docker compose up db

docker compose up --build --force-recreate

***********************************************
*** 04-04 Using Docker Compose CLI Commands ***
***********************************************

docker compose stop

docker compose stop app

docker compose start

docker compose start db

docker compose start app

docker compose down

docker compose down --volumes

docker compose up

docker compose down db

docker compose down

**************************************************************
*** 04-05 Challenge: Running a Multi-Container Application ***
**************************************************************

- Run the app and db services using a single command
- Stop only the db service
- Start the db service again
- Stop and remove both the app and db services using a single command

*************************************************************
*** 04-06 Solution: Running a Multi-Container Application ***
*************************************************************

docker compose up

docker stop db

docker start db

docker compose down

***********************************
*** 05-02 Using a Docker Volume ***
***********************************

docker volume create pgdata

docker volume ls

docker volume inspect docker-for-developers-create-and-manage-docker-containers-4009272_pgdata

docker volume rm docker-for-developers-create-and-manage-docker-containers-4009272_pgdata

docker volume prune

docker compose down --volumes

********************************
*** 05-03 Using a Bind Mount ***
********************************

# Add to compose.yml on line 13-14
volumes:
  - ./app:/app

docker compose up

***************************************
*** 05-04 Creating a Custom Network ***
***************************************

# Final compose.yml file

services:
  app:
    image: sbenhoff/docker-demo:v2
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgres://user:password@db:5432/messages
    depends_on:
      - db
    volumes:
      - ./app:/app
    networks:
      - appnet

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: messages
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - appnet

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge

###

docker compose up

docker network ls

docker network inspect <network id>

docker compose down

docker network rm <network id>

******************************************************************
*** 05-05 Challenge: Working with Persistent Data and Networks ***
******************************************************************

- Run the containers for both the app and db services
- Get a list of the volumes and copy the full name of the pgdata volume
- Stop the containers and remove the custom network
- Remove the pgdata volume

*****************************************************************
*** 05-06 Solution: Working with Persistent Data and Networks ***
*****************************************************************

docker compose up

docker volume ls

docker compose down

docker volume rm docker-for-developers-create-and-manage-docker-containers-4009272_pgdata

docker compose down --volumes

**********************************
*** 06-02 Initializing a Swarm ***
**********************************

docker swarm init

***************************************
*** 06-03 Adding Nodes to the Swarm ***
***************************************

docker swarm join-token worker

docker swarm join-token manager

docker node ls

******************************************
*** 06-04 Deploy and Inspect a Service ***
******************************************

docker stack deploy -c compose.yml myapp

docker service ls

docker service ps myapp_app

docker service scale myapp_app=5

docker service ps myapp_app

docker stack rm myapp

docker stack ls

docker swarm leave

docker swarm leave --force

*****************************************
*** 06-05 Challenge: Using Swarm Mode ***
*****************************************

- Initialize Swarm mode
- Deploy the stack for our existing web app and name it webapp
- Verify the app is working by navigating to localhost:3000
- Remove the webapp stack
- Leave Swarm mode

****************************************
*** 06-06 Solution: Using Swarm Mode ***
****************************************

docker swarm init

docker stack deploy -c compose.yml webapp

docker stack rm webapp

docker swarm leave --force

*********************************************
*** 07-02 Installing Kubectl and Minikube ***
*********************************************

https://kubernetes.io/docs/tasks/tools/

https://minikube.sigs.k8s.io/docs/start/

minikube start

minikube dashboard

********************************************************************
*** 07-03 Translating Docker Compose to Kubernetes Using Kompose ***
********************************************************************

https://kompose.io/installation/

kompose version

cd k8s

kompose convert

# Create k8s/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: myapp

********************************************
*** 07-04 Deploying a Sample Application ***
********************************************

docker build -t [username]/docker-demo:v3 --no-cache .

docker push [username]/docker-demo:v3

kubectl apply -f k8s/namespace.yaml

kubectl apply -f k8s/

minikube dashboard

minikube service app --url -n myapp

kubectl get pods -n myapp

kubectl logs [pod id] -n myapp

***********************************
*** 07-05 Scaling in Kubernetes ***
***********************************

kubectl scale deployment app --replicas=3 -n myapp

kubectl get pods -n myapp

kubectl apply -f k8s/app-deployment.yaml

kubectl get pods -n myapp

************************************************
*** 07-06 Challenge: Working With Kubernetes *** 
************************************************

- Rebuild your Docker image. Tag it with version 4 and use the no-cache option.
- Push the image to your repository on Docker Hub.
- Update the app deployment YAML file to: 
  - Use the new image
  - Set the replicas to 3
- Apply the changes to the app deployment file.
- Get a list of the pods available in the myapp namespace and copy the ID of the first pod available.
- View the logs for the pod with the ID you just copied.
- Extra Credit: Get the URL of the app and navigate to it to ensure the app is working correctly.

***********************************************
*** 07-07 Solution: Working With Kubernetes *** 
***********************************************

docker build -t [username]/docker-demo:v4 --no-cache .

docker push [username]/docker-demo:v4

kubectl apply -f k8s/app-deployment.yaml

kubectl get pods -n myapp

kubectl logs [pod id] -n myapp

minikube service app --url -n myapp

*****************************************************************
*** 07-08 Removing Kubernetes Resources and Stopping Minikube ***
*****************************************************************

kubectl delete service app -n myapp

kubectl delete deployment app -n myapp

kubectl delete namespace myapp

minikube dashboard

minikube stop

minikube start

minikube delete

**************************************
*** 08-02 Adding a GitHub Workflow ***
**************************************

## Create /.github/workflows/docker.yml

name: Build and Push Docker Image

on:
  pull_request:
    branches:
      - main  # Trigger on pull request to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: [username]/docker-demo:v5

*******************************************************
*** 08-05 Challenge: Implementing a GitHub Workflow ***
*******************************************************

- Use the 08-05 code branch
- Create docker-image.yml in the GitHub workflows folder
- Copy and paste the code from cheatsheet
  Update the Docker workflow file to make it work with your own Docker credentials
  Note that we are using version 6 
- Commit and push your work
  Create a pull request and use the main branch in your fork as the base 
    and compare it to the 08-05 branch
- View the workflow run as a part of the pull request process
- Verify that version 6 of the image has been pushed in Docker Hub

## Create /.github/workflows/docker-image.yml

name: Build and Push Docker Image

on:
  pull_request:
    branches:
      - main  # Trigger on pull request to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: [username]/docker-demo:v6